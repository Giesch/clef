* Now
- [ ] create a minimal sqlite database
  - [ ] keep connection somewhere
    either in Ui struct, worker thread/subscription or both
  - [ ] ids for albums and songs
    file locations for each

- [ ] change initial load command to start a subscription
  first, worker thread that:
  loads album data from audio directory
  resizes images
  notifies ui of loaded albums & art as they come in
    separate worker thread just for image resizing?
    or do all crawling first, then start doing images?

  eventually, worker thread that:
  loads album data from audio directory
  creates sqlite db if it's missing
  adds album data to sqlite
  resizes images
  saves resized images to config dir
  notifies ui of loaded albums & art as they come in

- [ ] cache the converted rgba images in config dir
  generate filename; keep in sqlite
echo DATABASE_URL=/tmp/diesel_demo.sqlite > .env

- [ ] replace icons with slightly darker color
  - convert to pngs?
  - modify iced to use theme text_color for svg currentColor?

- [ ] integration test the crawler
  with filesystem & db, without audio/ui

* Next
- [ ] sqlite setup
  - [ ] decoded song metadata
  - [ ] locations/names of resized album art
    match album covers to albums in a less dumb way
  - [ ] load a nice startup ui quickly
    - [ ] last played song
    - [ ] music directory index
  - [ ] remove the expect/unwraps taking song ids
  - [ ] replace the weird joins in ui::startup

  - [ ] change startup process to be more incremental
    ie, can happen in the background while app is interactive,
    and start where it left off if app is killed

- [ ] embed migrations, run on startup
  diesel_migrations = { version = "2.0.0", features = ["sqlite"] }
  - [ ] create db if it doesn't exist
  - [ ] add module and call fn in main
  - [ ] add build.rs for rerunning on change

- [ ] in player, if audio output is present,
  then spec and duration should still be validated

- [ ] in ui, current_song and progress should be in one optional

- [ ] add song durations to view
  - [ ] for currently playing song
  - [ ] in the album song list

- [ ] make a custom slider / player progress widget
  style it differently
  no mouse interaction when disabled
  change mouse interaction consistently on release

- [ ] thumbnail album art for currently playing song
  or next to songs in a non-album view

- [ ] handle metadata correctly in the audio thread
  https://github.com/pdeljanov/Symphonia/blob/master/GETTING_STARTED.md#consuming-metadata
  was symphonia-play doing that in the print helpers?

- [ ] switch to tracing from env-logger
  look into whether it plays nice with iced exector

- [ ] read symphonia docs thoroughly
- [ ] read iced examples thoroughly

- [ ] handle graceful shutdown on the audio thread
  need a typed return from the run method?
  or a way for the ui to join audio instead of disconnecting

- [ ] make a full custom app theme

* Someday
- [ ] playlists
- [ ] current queue (treat like another kind of playlist)
- [ ] other views

- [ ] handle missing time data on track info
  currently it just logs and uses zero
  should transition to an error state at the beginning
  ie have an Option<TrackInfo> with guaranteed fields
  instead of a TrackInfo with two optional fields
  does that mean refusing to play the song at all, though? need the id

- [ ] integration tests
- [ ] restart audio thread after a crash

- [ ] help improve iced's image handling
- [ ] Address scrolling lag when necessary

- [ ] keyboard support
  - [ ] space for play/pause
  - [ ] support media keys
  - [ ] tab navigation

- [ ] drag and drop import

- [ ] non-latin text (use cosmic's stuff early?)
  https://github.com/iced-rs/iced/issues/1454

- [ ] select the music directory with a menu/modal, and cache it
- [ ] select the config directory based on platform

- [ ] add a subtle play button to album art
