* Now
- [ ] add resampling for windows
  https://github.com/pdeljanov/Symphonia/issues/43
  https://github.com/pdeljanov/Symphonia/commit/a5ac0ec8101829fea3ce6cfedee9a22f089aea2d

- [-] add a way to search
  - modal? keyboard-based
    command pallete look
  - [X] open a command pallette style modal on pressing '/'
    clear it on escape, enter, ctrl-g
    - [X] read & play with the modal in iced_aw
    - [X] use or vendor iced_aw modal
      potential problems with newer iced versions?
      https://github.com/iced-rs/iced_aw/issues/25
      the readme refers to 0.4.x

  - [X] Accept Ctrl-G as Esc
  - [ ] add a text input to the modal
    elm-style text state in in the modal state enum
  - [ ] style the modal to look like a command palette
  - [ ] add an 'enter' handler

  - [ ] how to actually do the searching?
    NOTE: get the ui working first
    - sqlite full-text search
      it looks like sqlite has no 'fuzzy' support
    - some other 'fuzzy' option, using music cache
      could use something based on selecta/heatseeker
      is a 'real' search library necessary? ie tantivy https://docs.rs/tantivy/latest/tantivy/query/struct.FuzzyTermQuery.html
      - pro: want to show hits on structured content; ie album title, lyrics, etc
      - con: it's a lot
      - con: the dataset for my own music library isn't going to be that big
        how big would a local music library have to be before this mattered?
    consider using ngrams? https://www.reddit.com/r/rust/comments/f7rysk/typoresistant_text_search/

- [ ] fix/re-add optimistic scan position update again
  find some way to test this

* Next
- [ ] get true gapless playback
  asked here: https://github.com/pdeljanov/Symphonia/discussions/169
  the 'forward' method on PlayerState in player.rs is what has to change
    instead of calling play_queue, it should use some prepared thing
  - load early on same audio thread?
  - have a second audio thread?

- [ ] handle text overflow in bottom bar gracefully
  do the scroll back and forth thing? needs animations

- [-] keyboard support
  - [X] space for play/pause current song
  - [ ] tab navigation - need to make the buttons focusable
    so the track numbers will also have to be wrapped in button
    is it better to not mimic the web for this?
      what would the alternative look like?
      do everything by fuzzy search instead of tab-focus

- [ ] volume controls

- [ ] get a nicer 'stopped' state
  the do-nothing play button and progress slider are bad

- [ ] add some vimmy commands (scroll)
  C-e and C-y are easier
  snap to top/bottom is easy
  could have C-d and C-u just move by some predefined chunk

- [ ] keep track of the queue on the ui side
  necessary for displaying the queue

- [ ] audio support on windows
  some kind soul is working on adding windows support the symphonia-play example
  windows requires resampling in a way that linux (and maybe mac?) does not
  https://github.com/pdeljanov/Symphonia/issues/43
  https://github.com/pdeljanov/Symphonia/pull/167
- [ ] add media controls support on windows
  see if this could require having a window handle on the audio thread
  maybe find a workaround for that - see what Psst does

- [ ] replace icons with slightly darker color
  - convert to pngs?
  - modify iced to use theme text_color for svg currentColor?

- [ ] either get the dbus changes merged upstream in souvlaki, or vendor the library
  switch to a cargo workspace
- [ ] implement debug for MediaControls upstream
- [ ] fix panics in souvlaki fork (return option/result for name taken)
  audid for other unwraps/expects as well

- [ ] avoid using ProgressTimes::ZERO as a sentinel value
  use an optional, try to catch bad files on import

- [ ] ability to view tags
- [ ] ability to fuzzy search by tags
- [ ] ability to edit tags

- [ ] do the 'display_title' based on file system on import
  then allow updating it later
  this is less confusing for the user and avoids unnecessary optionals

- [ ] load a nice startup ui quickly
  - [ ] last played song - progress and scroll?

- [ ] integration test the crawler and resizer
  with filesystem & db, without audio/ui

- [ ] in player, if audio output is present,
  then spec and duration should still be validated

- [-] in ui, current_song and progress should be in one optional
  this makes updating the current song awkward,
  because only one of them comes from the cache

- [ ] make a custom slider / player progress widget
  style it differently
  no mouse interaction when disabled
  change mouse interaction consistently on release

- [ ] thumbnail album art for currently playing song
  or next to songs in a non-album view

- [ ] handle metadata correctly in the audio thread
  https://github.com/pdeljanov/Symphonia/blob/master/GETTING_STARTED.md#consuming-metadata
  was symphonia-play doing that in the print helpers?

- [ ] switch to tracing from env-logger
  look into whether it plays nice with iced exector

- [ ] read symphonia docs thoroughly
- [ ] read iced examples thoroughly

- [ ] handle graceful shutdown on the audio thread
  need a typed return from the run method?
  or a way for the ui to join audio instead of disconnecting

- [ ] make a full custom app theme

- [ ] think about a way to type-enforce using immediate transaction for writes
  like a custom pool wrapper or something
  might need a delegate macro for that to not be super annoying
  does sqlite have read-only connections?

- [ ] handle the audio thread errors gracefully
  restart the audio thread?
  go through the possible errors to see what could be done
  ie; missing/bad file = tell the ui about it and stop
    can test this by deleting the file after startup

- [ ] listen to media keys while backgrounded

- [ ] make it more responsive
  text wrapping in bottom row is bad

- [ ] listen to media keys while backgrounded

- [ ] make the layout more responsive
  text wrapping in bottom row is bad

- [ ] reduce cpu usage
  where is it coming from? me, iced, or symphonia? audio thread spinning?

* Someday
- [ ] playlists
- [ ] current queue (treat like another kind of playlist)
- [ ] other views

- [ ] investigate hot-reloading
  The existing lib only works on macos
  but there may be a way for iced itself to avoid unloading the old dylib
  or work around it no longer existing during overlay layout.
  The hot-reload lib guy is/was also looking into a solution
  https://github.com/rksm/hot-lib-reloader-rs/issues/25

- [ ] learn more about how to gracefully shut down audio thread
  the audio player needs an explicit 'graceful shutdown' action
  currently relying on the process ending to kill it
    is that actually just fine? counting on drop impls to clean things up
    the player doesn't really have non-process-space cleanup to do
    the resizer could leave files in a bad state, but it's already 'inside' iced
  consider moving the audio thread into iced's executor?

- [ ] cache media controls metadata to avoid unnecessary dbus updates
  consider implementing this upstream
- [ ] make souvlaki error respect std error required by anyhow

- [ ] handle missing time data on track info
  currently it just logs and uses zero
  should transition to an error state at the beginning
  ie have an Option<TrackInfo> with guaranteed fields
  instead of a TrackInfo with two optional fields
  does that mean refusing to play the song at all, though? need the id

- [ ] integration tests
- [ ] restart audio thread after a crash

- [ ] help improve iced's image handling
- [ ] Address scrolling lag when necessary

- [ ] drag and drop import
- [ ] easy bandcamp import?
  drag/drop zip files?
  open web view?
  script for importing collection?

- [ ] non-latin text (use cosmic's stuff early?)
  https://github.com/iced-rs/iced/issues/1454
  for now, they're still using a patched version of iced for the demo
  https://github.com/pop-os/cosmic-text/issues/33#issuecomment-1305809078

- [ ] select the music directory with a menu/modal, and cache it
- [ ] select the config directory based on platform

- [ ] add a subtle play button to album art

- [ ] reconsider assumptions re: audio directory
  - the crawler only goes one layer deep
  - songs get their album id based on directory instead of tag

- [ ] need a way to add/edit tags
  maybe just in the db, maybe also on the audio file

- [ ] property testing

- [ ] use TryFrom instead of as for crawling total_seconds

- [ ] set up graceful error handling on startup
  ie missing config dir, other fatal errors should be readable
    for a non-technical user
  either in ui or miette

- [ ] remove/update remove_dir_all from souvlaki
  there's a patched version of 0.8.0 that fixes a security vulnerability
  this only affects windows builds, but this should block windows support
  remove_dir_all v0.5.3
└── tempfile v3.3.0
    └── uds_windows v1.0.2
        └── zbus v3.6.2
            └── souvlaki v0.5.1 (https://github.com/Giesch/souvlaki?branch=main#ede6a666)
                └── clef v0.1.0 (/home/danielknutson/Projects/clef)
