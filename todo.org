* Now
- [X] fix media controls while app is backgrounded
  - [X] first, check if listening for controls on audio thread even works
    can it avoid having another thread for listening for controls?
      like have the player hold a vec of entered commands
      directly clone the flume sender (the library has a separate thread)
  - [X] then, figure out how to handle moving the logic over
    the optimistic update on back will be weird
      could it just not do that? would it be noticable?
      seems fine

  - [X] publish media controls metadata from the audio thread
    if published from the main ui thread,
      it's delayed until the app is foregrounded again
      what's the nice way to organize this?
    - [X] duplicate all the song/album info necessary for controls in the player queue
      need a semi-denormalized 'song with album name' type
    - [X] change the StepResult type to be a little more like Effect
    - [X] move ControlsMetadata from Effect to the new version of player::StepResult
      remove all media controls stuff from ui and submodules
  - [X] add media controls playback publish to player
  - [X] use a wrapper type around media controls to avoid 'unknown song' when stopped
    maybe fork/vendor the library to do this instead of wrapping

  - [X] detach media controls correctly when reaching end of queue
    souvlaki doesn't close the controls until the program closes? deinit/detach doesn't work
    needed to release the dbus name on kill

* Next
- [-] keyboard support
  - [X] space for play/pause current song
  - [ ] tab navigation - need to make the buttons focusable
    so the track numbers will also have to be wrapped in button
    is it better to not mimic the web for this?
      what would the alternative look like?
      do everything by fuzzy search instead of tab-focus

- [ ] get a nicer 'stopped' state
  the do-nothing play button and progress slider are bad

- [ ] add some vimmy commands (scroll)
  C-e and C-y are easier
  snap to top/bottom is easy
  could have C-d and C-u just move by some predefined chunk

- [ ] add a way to search
  - modal? keyboard-based
    command pallete look


- [ ] keep track of the queue on the ui side
  necessary for displaying the queue
  this one will need the actual metadata, like Queue<Song> or something

- [ ] test app on windows
- [ ] add media controls support on windows
  see if this could require having a window handle on the audio thread
  maybe find a workaround for that - see what Psst does

- [ ] replace icons with slightly darker color
  - convert to pngs?
  - modify iced to use theme text_color for svg currentColor?

- [ ] either get the bus changes merged upstream, or vendor the library
  switch to a workspace

- [ ] add a justfile instead of using dev scripts

- [ ] implement debug for MediaControls upstream

- [ ] avoid using ProgressTimes::ZERO as a sentinel value
  use an optional, try to catch bad files on import

- [ ] ability to view tags
- [ ] ability to fuzzy search by tags
- [ ] ability to edit tags

- [ ] do the 'display_title' based on file system on import
  then allow updating it later
  this is less confusing for the user and avoids unnecessary optionals

- [ ] find a better way to avoid flicker
  skipping a magic number of audio updates sucks
  need a 'seek completed' response from audio thread
    or just a flag on the normal update? separate message seems better
    does it have to care about multiple seeks in flight? like while paused
      could have request ids or something, but hopefully that's unnecessary

- [ ] load a nice startup ui quickly
  - [ ] last played song - progress and scroll?

- [ ] integration test the crawler and resizer
  with filesystem & db, without audio/ui

- [ ] in player, if audio output is present,
  then spec and duration should still be validated

- [-] in ui, current_song and progress should be in one optional
  this makes updating the current song awkward,
  because only one of them comes from the cache

- [ ] make a custom slider / player progress widget
  style it differently
  no mouse interaction when disabled
  change mouse interaction consistently on release

- [ ] thumbnail album art for currently playing song
  or next to songs in a non-album view

- [ ] handle metadata correctly in the audio thread
  https://github.com/pdeljanov/Symphonia/blob/master/GETTING_STARTED.md#consuming-metadata
  was symphonia-play doing that in the print helpers?

- [ ] switch to tracing from env-logger
  look into whether it plays nice with iced exector

- [ ] read symphonia docs thoroughly
- [ ] read iced examples thoroughly

- [ ] handle graceful shutdown on the audio thread
  need a typed return from the run method?
  or a way for the ui to join audio instead of disconnecting

- [ ] make a full custom app theme

- [ ] think about a way to type-enforce using immediate transaction for writes
  like a custom pool wrapper or something
  might need a delegate macro for that to not be super annoying
  does sqlite have read-only connections?

- [ ] handle the audio thread errors gracefully
  restart the audio thread?
  go through the possible errors to see what could be done
  ie; missing/bad file = tell the ui about it and stop
    can test this by deleting the file after startup

- [ ] listen to media keys while backgrounded

- [ ] make it more responsive
  text wrapping in bottom row is bad

- [ ] listen to media keys while backgrounded

- [ ] make the layout more responsive
  text wrapping in bottom row is bad

* Someday
- [ ] playlists
- [ ] current queue (treat like another kind of playlist)
- [ ] other views

- [ ] cache media controls metadata to avoid unnecessary dbus updates
  consider implementing this upstream
- [ ] make souvlaki error respect std error required by anyhow

- [ ] handle missing time data on track info
  currently it just logs and uses zero
  should transition to an error state at the beginning
  ie have an Option<TrackInfo> with guaranteed fields
  instead of a TrackInfo with two optional fields
  does that mean refusing to play the song at all, though? need the id

- [ ] integration tests
- [ ] restart audio thread after a crash

- [ ] help improve iced's image handling
- [ ] Address scrolling lag when necessary

- [ ] drag and drop import
- [ ] easy bandcamp import?
  drag/drop zip files?
  open web view?
  script for importing collection?

- [ ] non-latin text (use cosmic's stuff early?)
  https://github.com/iced-rs/iced/issues/1454
  for now, they're still using a patched version of iced for the demo
  https://github.com/pop-os/cosmic-text/issues/33#issuecomment-1305809078

- [ ] select the music directory with a menu/modal, and cache it
- [ ] select the config directory based on platform

- [ ] add a subtle play button to album art

- [ ] reconsider assumptions re: audio directory
  - the crawler only goes one layer deep
  - songs get their album id based on directory instead of tag

- [ ] need a way to add/edit tags
  maybe just in the db, maybe also on the audio file

- [ ] property testing

- [ ] use TryFrom instead of as for crawling total_seconds
